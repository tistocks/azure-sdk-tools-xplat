/**
* Copyright (c) Microsoft.  All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// Test includes
var fs = require('fs');
var path = require('path');
var sinon = require('sinon');
var keyFiles = require('../../lib/util/keyFiles');
var utils = require('../../lib/util/utils');

var nockHelper = require('./nock-helper');

exports = module.exports = MockedTestUtils;

function MockedTestUtils(testPrefix, forceMocked) {
  this.testPrefix = testPrefix;
  this.currentTest = 0;
  this.recordingsFile = __dirname + '/../recordings/' + this.testPrefix + '.nock.js';

  if (forceMocked) {
    this.isMocked = true;
  } else {
    this.isMocked = !process.env.NOCK_OFF;
  }

  this.isRecording = process.env.AZURE_NOCK_RECORD;
}

MockedTestUtils.prototype.setupSuite = function (callback) {
  if (this.isMocked) {
    process.env.AZURE_ENABLE_STRICT_SSL = false;

    sinon.stub(keyFiles, 'readFromFile', function () {
      return {
        cert: process.env.AZURE_CERTIFICATE,
        key: process.env.AZURE_CERTIFICATE_KEY
      };
    });

    sinon.stub(keyFiles, 'writeToFile', function () {});

    var originalReadFileSync = fs.readFileSync;
    sinon.stub(fs, 'readFileSync', function (filename) {
      if (path.basename(filename) !== 'config.json') {
        return originalReadFileSync(filename, 'utf8');
      } else {
        return '{ "endpoint": "https://management.core.windows.net",' +
          ' "subscription": "' + process.env.AZURE_SUBSCRIPTION_ID + '" }';
      }
    });

    var originalPathExistsSync = utils.pathExistsSync;
    sinon.stub(utils, 'pathExistsSync', function (filename) {
      if (path.basename(filename) === 'config.json') {
        return true;
      }

      return originalPathExistsSync(filename);
    });

    if (this.isRecording) {
      fs.writeFileSync(this.recordingsFile,
        '// This file has been autogenerated.\n\n' +
        'exports.scopes = [');
    }
  }

  callback();
};

MockedTestUtils.prototype.teardownSuite = function (callback) {
  this.currentTest = 0;

  if (this.isMocked) {
    if (this.isRecording) {
      fs.appendFileSync(this.recordingsFile, '];');
    }

    keyFiles.readFromFile.restore();
    keyFiles.writeToFile.restore();

    if (fs.readFileSync.restore) {
      fs.readFileSync.restore();
    }

    if (utils.pathExistsSync.restore) {
      utils.pathExistsSync.restore();
    }

    delete process.env.AZURE_ENABLE_STRICT_SSL;
  }

  callback();
};

MockedTestUtils.prototype.setupTest = function (callback) {
  nockHelper.nockHttp();

  if (this.isMocked && this.isRecording) {
    // nock recoding
    nockHelper.nock.recorder.rec(true);
  } else if (this.isMocked) {
    // nock playback
    var nocked = require(this.recordingsFile);

    if (this.currentTest < nocked.scopes.length) {
      nocked.scopes[this.currentTest++].forEach(function (createScopeFunc) {
        createScopeFunc(nockHelper.nock);
      });
    } else {
      throw new Error('It appears the ' + this.recordingsFile + ' file has more tests than there are mocked tests. ' +
        'You may need to re-generate it.');
    }
  }

  callback();
};

MockedTestUtils.prototype.teardownTest = function (callback) {
  if (this.isMocked && this.isRecording) {
    // play nock recording
    var scope = this.scopeWritten ? ',\n[' : '[';
    this.scopeWritten = true;
    var lineWritten;
    nockHelper.nock.recorder.play().forEach(function (line) {
      if (line.indexOf('nock') >= 0) {
        // apply fixups of nock generated mocks

        // do not filter on body as they usual have time related stamps
        line = line.replace(/(\.post\('.*')[^\)]+\)/, '.filteringRequestBody(function (path) { return \'*\';})\n$1, \'*\')');
        line = line.replace(/(\.get\('.*')[^\)]+\)/, '.filteringRequestBody(function (path) { return \'*\';})\n$1, \'*\')');
        line = line.replace(/(\.put\('.*')[^\)]+\)/, '.filteringRequestBody(function (path) { return \'*\';})\n$1, \'*\')');
        line = line.replace(/(\.delete\('.*')[^\)]+\)/, '.filteringRequestBody(function (path) { return \'*\';})\n$1, \'*\')');
        line = line.replace(/(\.merge\('.*')[^\)]+\)/, '.filteringRequestBody(function (path) { return \'*\';})\n$1, \'*\')');
        line = line.replace(/(\.patch\('.*')[^\)]+\)/, '.filteringRequestBody(function (path) { return \'*\';})\n$1, \'*\')');

        scope += (lineWritten ? ',\n' : '') + 'function (nock) { \n' +
          'var result = ' + line + ' return result; }';
        lineWritten = true;
      }
    });
    scope += ']';
    fs.appendFileSync(this.recordingsFile, scope);
    nockHelper.nock.recorder.clear();
  }

  nockHelper.unNockHttp();

  callback();
};

/**
* Generates an unique identifier using a prefix, based on a currentList and repeatable or not depending on the isMocked flag.
*
* @param {string} prefix          The prefix to use in the identifier.
* @param {array}  currentList     The current list of identifiers.
* @param {bool}   isMocked        Boolean flag indicating if the test is mocked or not.
* @return {string} A new unique identifier.
*/
MockedTestUtils.prototype.generateId = function (prefix, currentList) {
  if (!currentList) {
    currentList = [];
  }

  while (true) {
    var newNumber;
    if (this.isMocked) {
      // Predictable
      newNumber = prefix + (currentList.length + 1);
      currentList.push(newNumber);

      return newNumber;
    } else {
      // Random
      newNumber = prefix + Math.floor(Math.random() * 10000);
      if (currentList.indexOf(newNumber) === -1) {
        currentList.push(newNumber);

        return newNumber;
      }
    }
  }
};